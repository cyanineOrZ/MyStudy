ES6中新增的技术，用来优化JavaScript的异步操作

（旧版JavaScript中，仅使用回调函数来进行异步操作）

promise是一种规范化的异步方案，用来表述一个异步任务最终的结果是成功或者失败，并且根据结果进行相对应的操作

promise是一个构造函数，用来进行异步操作，通过promise封装一个异步操作，并且可以获取该异步操作成功或者失败的结果值

ps！：promise不属于异步操作，对于JavaScript而言，构造promise属于一个同步任务，并且在promise构造完成后，里面的回调函数会立即执行
只有then处理以及对应的回调函数属于异步操作（promise只是一个异步操作管理器，本身并不是一个异步操作）


promise执行流程：
1、创建peomise对象

2、promise执行执行器函数（也即搭载resolve和reject回调函数的函数），根据内部处理的结果改变自身的状态

3、promise根据状态执行相对应的操作

4、执行相对应的回调函数，并得到新的promise对象



promise优势

1、指定回调函数的方式更加的灵活

使用promise封装一个异步任务，当promise启动时，异步任务也被启动，异步任务完成后，返回一个promise对象
返回得到的promise对象绑定回调函数（可以绑定多个回调函数）


2、promise可以支持链式调用（promise的返回结果为一个promise对象），可以解决回调地狱（回调函数嵌套回调函数）问题【优化回调地狱，让异步的处理方式变为统一】







回调地狱

回调函数嵌套使用，外部回调函数的结果是内部回调函数进行使用的条件

不利于阅读

不利于异常处理