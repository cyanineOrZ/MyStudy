// 对于引用数据类型而言， 直接将一个引用复制类型的值赋值给另一个引用数据类型， 只是将引用数据类型的地址值赋值给另一个引用数据类型， 原理是js底层中，对于变量的赋值操作只会将栈里面的值进行操作，而不会直接对堆里面的值进行操作

// 浅拷贝 ，用我的理解就是，浅拷贝只是创建了一个新的对象，但是新对象和旧对象之间仍有可能存在内存空间的共享（比如拥有共同的对象和数组）


// 浅拷贝与直接赋值的区别

// 浅拷贝是按位拷贝对象，会创建一个新的对象，新对象里面有着原始对象属性值的一份精确拷贝，如果对象里面的值是基础数据类型
// 则浅拷贝会直接拷贝他的值，如果是引用数据类型，则拷贝的是他的地址值

// 浅拷贝可以对嵌套对象或者多维数组进行多层拷贝，只要不是完全层次的深拷贝都叫浅拷贝


//1、直接赋值
const test = {
    name: "WOc",
    age: 11,
    t: [1, 2]
}
const obj = test
obj.age = 20
console.log(test);
console.log(obj);
// 发现会一同改变，则就是因为只赋值了地址值导致两个变量的指向一致
console.warn("分割");

// 2、浅拷贝
const test2 = {}
Object.assign(test2, test)
test2.age = 40
console.log("基础数据类型改变");
console.log(test);
console.log(test2);

console.log("引用数据类型改变");
test2.t = [2, 3]
console.log(test);
console.log(test2);
console.warn("分割");
//不会一同改变， 这就是浅拷贝与直接复制的区别


// 简单来说，浅拷贝对于基础数据类型而言，是精确复制，对于引用数据类型而言，是直接赋值操作
